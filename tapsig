#!/bin/sh

PATH=.:$PATH

plan=0
rc_plan=0

ok(){
	printf "ok $plan $description\n";
}

not_ok(){
	printf "not ok $plan $description\n"
}

skip(){
	skip=$1
}

todo(){
	todo=$1
}

depends_on(){
	if ! command -v "$1";then
		skip_all "$1 not installed."
	fi
}

skip_all(){
	clean_up
	printf "1..0 # SKIP${1+ $1}\n"
	exit 0
}

check_expections(){
	if [ "$plan" != 0 ];then
		test_output stderr_plan stderr &&
		test_output stdout_plan stdout &&
		[ ${rc-0} -eq $rc_plan ] &&
		ok ||
		not_ok
	fi
}

end_current_test(){
	if [ -n "$skip" ];then
		printf "ok $plan # SKIP $skip\n"
		skip=""
	elif [ -n "$todo" ];then
		printf "not ok $plan # TODO $todo\n"
		todo=""
	else
		check_expections
	fi
	clean_up
}

tap(){
	end_current_test
	touch stdout_plan stderr_plan
	plan=$(( plan + 1 ))
	description=$1
}

test_output(){
	if cmp -s "$1" "$2";then
		return 0
	else
		diff -u "$1" "$2" | diag
		return 1
	fi
}

done_testing(){
	end_current_test
	printf "1..$plan\n"
	exit 0
}

call(){
	if [ -e input ];then
		"$@" input > stdout 2> stderr
	else
		"$@" > stdout 2> stderr
	fi
	rc=$?
}

diag(){
	sed 's/^/# /'
}

input() { cat > input;  }
stdin() { cat > stdin;  }
stdout(){ cat > stdout_plan; }
stderr(){ cat > stderr_plan; }

rc() { rc_plan=$1; }

clean_up(){
	rm -f input stdin stdout stderr expect stdout_plan stderr_plan;
	rc_plan=0
}

test_file=$1
shift

if [ -e "$test_file" ];then
	. "$test_file"
fi
